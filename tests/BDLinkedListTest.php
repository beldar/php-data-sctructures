<?php

require_once dirname(__FILE__) . '/../BDLinkedList.php';

/**
 * Test class for BDLinkedList.
 * Generated by PHPUnit on 2013-03-03 at 20:09:25.
 */
class BDLinkedListTest extends PHPUnit_Framework_TestCase {

    /**
     * @var BDLinkedList
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new BDLinkedList;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }


    /**
     * @todo Implement testInsertBefore().
     */
    public function testInsertBefore() {
        $this->object->goBegin();
        $this->object->insertBefore(3);
        $this->object->insertBefore(2);
        $this->object->insertBefore(1);
        $this->object->goBegin();
        $this->assertEquals(3, $this->object->getElement());
        $this->object->forward();
        $this->assertEquals(2, $this->object->getElement());
    }

    /**
     * @todo Implement testInsertAfter().
     */
    public function testInsertAfter() {
        $this->object->goEnd();
        $this->object->insertAfter(1);
        $this->object->insertAfter(2);
        $this->object->insertAfter(3);
        $this->object->goEnd();
        $this->assertEquals(1, $this->object->getElement());
        $this->object->backward();
        $this->assertEquals(2, $this->object->getElement());
    }

    /**
     * @todo Implement testGetElement().
     */
    public function testGetElement() {
        $this->object->insertBefore(1);
        $this->object->goBegin();
        $this->assertEquals(1, $this->object->getElement());
    }

    /**
     * @todo Implement testRemove().
     */
    public function testRemove() {
        $this->object->goBegin();
        $this->object->insertBefore(1);
        $c = $this->object->getCount();
        $this->object->goBegin();
        $this->object->remove();
        $this->assertEquals($c-1,$this->object->getCount());
    }

    /**
     * @todo Implement testForward().
     */
    public function testForward() {
        $this->object->insertBefore(1);
        $this->object->insertBefore(2);
        $this->object->goBegin();
        $this->assertEquals(1, $this->object->getElement());
        $this->object->forward();
        $this->assertEquals(2, $this->object->getElement());
    }

    /**
     * @todo Implement testBackward().
     */
    public function testBackward() {
        $this->object->goEnd();
        $this->object->insertAfter(1);
        $this->object->insertAfter(2);
        $this->object->goEnd();
        $this->assertEquals(1, $this->object->getElement());
        $this->object->backward();
        $this->assertEquals(2, $this->object->getElement());
    }

    /**
     * @todo Implement testIstail().
     */
    public function testIstail() {
        $this->object->forward();
        $this->assertTrue($this->object->isTail());
    }

    /**
     * @todo Implement testIshead().
     */
    public function testIshead() {
        $this->object->backward();
        $this->assertTrue($this->object->isHead());
    }

    /**
     * @todo Implement testGoBegin().
     */
    public function testGoBegin() {
        $this->object->goBegin();
        $this->object->insertBefore(1);
        $this->object->insertBefore(2);
        $this->object->goBegin();
        $this->assertEquals(1,$this->object->getElement());
    }

    /**
     * @todo Implement testGoEnd().
     */
    public function testGoEnd() {
        $this->object->goEnd();
        $this->object->insertAfter(1);
        $this->object->insertAfter(2);
        $this->object->goEnd();
        $this->assertEquals(1,$this->object->getElement());
    }

    /**
     * @todo Implement testIsempty().
     */
    public function testIsempty() {
        $this->assertTrue($this->object->isEmpty());
    }

    /**
     * @todo Implement testGetCount().
     */
    public function testGetCount() {
        $this->object->goBegin();
        for($i=0;$i<100;$i++)
            $this->object->insertBefore($i);
        $this->assertEquals(100,$this->object->getCount());
    }

    /**
     * @todo Implement testClear().
     */
    public function testClear() {
        for($i=0;$i<100;$i++)
            $this->object->insertAfter($i);
        $this->object->clear();
        $this->assertEquals(0,$this->object->getCount());
    }

}

?>
